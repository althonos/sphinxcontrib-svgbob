name: Publish to PyPI

on:
  push:
    tags:
      - v*.*.*

jobs:

  wheel-linux-aarch64:
    name: Build Linux wheels (Aarch64)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-tag:
        - cp38-manylinux_aarch64
        - cp39-manylinux_aarch64
        - cp310-manylinux_aarch64
        - cp311-manylinux_aarch64
        - cp312-manylinux_aarch64
        - cp313-manylinux_aarch64
    steps:
    - uses: actions/checkout@v4
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v2
      with:
        platforms: all
    - name: Build manylinux wheels
      uses: pypa/cibuildwheel@v2.19.1
      env:
        CIBW_ARCHS: aarch64
        CIBW_BUILD: ${{ matrix.python-tag }}
        CIBW_BEFORE_ALL: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh /dev/stdin -y"
        CIBW_BEFORE_BUILD: "pip install setuptools-rust"
        CIBW_BUILD_VERBOSITY: 2
        CIBW_ENVIRONMENT: CARGO_NET_GIT_FETCH_WITH_CLI=true
      with:
        output-dir: dist
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-manylinux_aarch64
        path: dist/*

  wheel-linux-x86_64:
    name: Build Linux wheels (x86-64)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-tag:
        - cp38-manylinux_x86_64
        - cp39-manylinux_x86_64
        - cp310-manylinux_x86_64
        - cp311-manylinux_x86_64
        - cp312-manylinux_x86_64
        - cp313-manylinux_x86_64
    steps:
    - uses: actions/checkout@v4
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Build manylinux wheels
      uses: pypa/cibuildwheel@v2.19.1
      env:
        CIBW_ARCHS: x86_64
        CIBW_BUILD: ${{ matrix.python-tag }}
        CIBW_BEFORE_ALL: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh /dev/stdin -y"
        CIBW_BEFORE_BUILD: "pip install setuptools-rust"
        CIBW_BUILD_VERBOSITY: 2
        CIBW_ENVIRONMENT: CARGO_NET_GIT_FETCH_WITH_CLI=true
      with:
        output-dir: dist
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-manylinux_x86_64
        path: dist/*

  wheel-macos-x86_64:
    name: Build MacOS wheels (x86-64)
    runs-on: macOS-latest
    strategy:
      matrix:
        python-tag:
        - cp38-macosx_x86_64
        - cp39-macosx_x86_64
        - cp310-macosx_x86_64
        - cp311-macosx_x86_64
        - cp312-macosx_x86_64
        - cp313-macosx_x86_64
    steps:
    - uses: actions/checkout@v4
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Build manylinux wheels
      uses: pypa/cibuildwheel@v2.19.1
      env:
        CIBW_ARCHS: x86_64
        CIBW_BUILD: ${{ matrix.python-tag }}
        CIBW_BEFORE_ALL: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh /dev/stdin -y"
        CIBW_BEFORE_BUILD: "pip install setuptools-rust"
        CIBW_BUILD_VERBOSITY: 2
        CIBW_ENVIRONMENT: CARGO_NET_GIT_FETCH_WITH_CLI=true
      with:
        output-dir: dist
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-macosx_x86_64
        path: dist/*

  wheel-macos-aarch64:
    name: Build MacOS wheels (Aarch64)
    runs-on: macOS-12
    strategy:
      matrix:
        python-tag:
        - cp38-macosx_arm64
        - cp39-macosx_arm64
        - cp310-macosx_arm64
        - cp311-macosx_arm64
        - cp312-macosx_arm64
    steps:
    - uses: actions/checkout@v4
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-darwin
    - name: Build manylinux wheels
      uses: pypa/cibuildwheel@v2.19.1
      env:
        CIBW_ARCHS: arm64
        CIBW_BUILD: ${{ matrix.python-tag }}
        CIBW_BEFORE_ALL: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh /dev/stdin -y"
        CIBW_BEFORE_BUILD: "pip install setuptools-rust"
        CIBW_BUILD_VERBOSITY: 2
        CIBW_ENVIRONMENT: CARGO_NET_GIT_FETCH_WITH_CLI=true
        CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=12.0
      with:
        output-dir: dist
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-macosx_arm64
        path: dist/*

  wheel-win32-x86_64:
    name: Build Windows wheels (x86-64)
    runs-on: windows-2019
    strategy:
      matrix:
        python-tag:
        - cp37-win_amd64
        - cp38-win_amd64
        - cp39-win_amd64
        - cp310-win_amd64
        - cp311-win_amd64
        - cp312-win_amd64
    steps:
    - uses: actions/checkout@v4
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Build manylinux wheels
      uses: pypa/cibuildwheel@v2.19.1
      env:
        CIBW_ARCHS: AMD64
        CIBW_BUILD: ${{ matrix.python-tag }}
        CIBW_BEFORE_BUILD: "pip install setuptools-rust"
        CIBW_BUILD_VERBOSITY: 2
      with:
        output-dir: dist
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-win_amd64
        path: dist/*

  sdist:
    runs-on: ubuntu-latest
    name: Build source distribution
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python 3.13
      uses: actions/setup-python@v2
      with:
        python-version: 3.13
    - name: Install CI requirements
      run: python -m pip install -U -r .github/workflows/requirements.txt
    - name: Build source distribution without vendored sources
      run: python setup.py sdist
    - name: Store built source distribution
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*

  upload:
    environment: PyPI
    runs-on: ubuntu-latest
    name: Upload
    permissions:
      id-token: write
    needs:
    - sdist
    - wheel-linux-aarch64
    - wheel-linux-x86_64
    - wheel-macos-aarch64
    - wheel-macos-x86_64
    - wheel-win32-x86_64
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist
        merge-multiple: true
    - uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist
        merge-multiple: true
    - name: Publish distributions to PyPI
      if: startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1

  release:
    environment: GitHub Releases
    runs-on: ubuntu-latest
    permissions: write-all
    if: "!contains(github.ref, 'rc')"
    name: Release
    needs: upload
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
    - name: Release a Changelog
      uses: rasmus-saks/release-a-changelog-action@v1.2.0
      with:
        github-token: '${{ secrets.GITHUB_TOKEN }}'

